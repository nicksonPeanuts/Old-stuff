demo()
help()
demo()
q()
q()
q()
q()
demo()
b <- 1:10     #sequenza da:a by 1
ls()          #stampa il nome degli oggetti presenti nell'environment
rm(a)         #rimuove l'oggetto a
rm(a,a.1)
rm(list=ls()) #rimuove tutti gli oggetti nell'environment
## Comandi di base e funzioni ----
# valutare un'espressione e assegnare il risultato in un oggetto denominato
x <- 1+1
x   # Stampare l'oggetto
# qualche esempio corretto:
a1 <- 1
a <- 2
b <- 1:10     #sequenza da:a by 1
b[3]
b[0]
b[1]
b[1] = 2
sqrt(4)
sqrt(5)
binomial(1)
binomial(log(2))
a«3
y <- 2
?Arithmetic
help(Arithmetic)
rm(list = ls())
b <-1
?str
str(b)
## Scalari ----
### numeric ----
a <- 10
b <-1
?str
str(b)
## Scalari ----
### numeric ----
a <- 10
b <- 3 / 10
c <- (a + b) / b
c
str(b)
### character ----
d <- "1"
e <- "2"
s <- "hello"
str(s)
### integer ----
var <- 2
var.int <- 2L
str(var)
rm(list=ls())
e <- "2"
u <- d+e
### character ----
d <- "1"
e <- "2"
u <- d+e
## Scalari ----
### numeric ----
a <- 10
b <- 3 / 10
rm(list = ls())
## Scalari ----
### numeric ----
a <- 10
b <- 3 / 10
c <- (a + b) / b
c
str(b) #structor
### character ----
d <- "1"
?str
?is
?as
## Vettori ----
# un vettore ammette solo elementi dello stesso tipo
# c(); vector()
db_v <- c(10, 15, 6.4, 3, 18) # definiamo il vettore x
db_v                          # stampiamo x
str(db_v)                     # verifichiamo la struttura di x
int_v <- c(1L, 6L, 10L)
int_v
str(int_v)
log_v <- c(TRUE, FALSE, T, F)
log_v
str(log_v)
ch_v <- c("A", "B", "C")
ch_v
?seq
### Creare una sequenza ----
v <- 1:10
v
seq(from=1, to=10)
seq(from=1, to=10, by=3)#vengono stampate nella console, non assegnate a oggetti
seq(from=1, to=10, length=5)
rep(c(1,2), each=3)
a <- c(rep(2,3),4,5,rep(1,5),11:15)
rep(c(1,2), each=3) # 1 1 1 2 2 2
a
paste("file", 1:5, ".txt" , sep="")
#concatenatore circa
paste("file", 1:5, ".txt" , sep="")
paste("file", 1, ".txt" , sep="")
?paste
#concatenatore circa
paste("file", 1:5, ".txt" , sep="*")
#concatenatore circa
paste("file", 1:5, ".txt" , sep="")
rm(list=ls())
print(data)
data <- read.table("dati_esercizio.csv")
mydata <- read.table("dati_esercizio.csv")
print(mydata)
mydata <- read.csv("dati_esercizio.csv")
print(getwd())
print(getwd())
setwd("/Scrivania/DataAnalysis")
print(getwd())
print(getwd())
setwd("/Scrivania/DataAnalysis/")
print(getwd())
setwd("/home/nic/Scrivania/DataAnalysis/")
print(getwd())
mydata <- read.csv("dati_esercizio.csv")
print(mydata)
#testing the plot and distributiion
summary(mydata)
#testing the plot and distributiion
summary(mydata)
hist(mydata)
#testing the plot and distributiion
summary(mydata)
hist(mydata, 100)
#testing the plot and distributiion
plot(mydata)
View(mydata)
#testing the plot and distributiion
plot(mydata[5])
#concatenatore circa
paste("file", 1:5, ".txt" , sep="")
paste("file", 1, ".txt" , sep="")
?paste
## Selezione di elementi ed operazioni
#selezione di elementi (la prima posizione ha indice 1)
y <- a[6]
y
b <-1
?str
str(b)
## Scalari ----
### numeric ----
a <- 10
b <- 3 / 10
c <- (a + b) / b
c
str(b) #structor -> ritorna la tipologia dell'oggetto
### character ----
d <- "1"
e <- "2"
s <- "hello"
str(s)
### integer ----
var <- 2
var.int <- 2L
str(var)
str(var.int)
x <- TRUE
y <- FALSE
x+y
2*x
str(x)
# is.numeric/character/integer/logical...
is.integer(var)
is.integer(var.int)
# as.numeric/character/integer/logical...
#as cambia il tipo di variabile messo nell'argomento
as.numeric(s) #s character
as.integer(b) #b numeric es: 0.3 -> 3
as.numeric(FALSE) #valori logici
as.character(a)
## Vettori ----
# un vettore ammette solo elementi dello stesso tipo
# c(); vector()
db_v <- c(10, 15, 6.4, 3, 18) # definiamo il vettore x
db_v                          # stampiamo x
str(db_v)                     # verifichiamo la struttura di x
int_v <- c(1L, 6L, 10L)
int_v
str(int_v)
log_v <- c(TRUE, FALSE, T, F)
log_v
str(log_v)
ch_v <- c("A", "B", "C")
ch_v
str(ch_v)
is.logical(log_v)
is.numeric(log_v)
### Creare una sequenza ----
v <- 1:10
v
seq(from=1, to=10)
seq(from=1, to=10, by=3)#vengono stampate nella console, non assegnate a oggetti
seq(from=1, to=10, length=5)#vettore ottenuto ha lunghezza 5, divide in 5 la sequenza
#rep replicati gli argomenti passati al primo argomento della funzione
rep(1,15) #un vettore di lunghezza 15 con tutti gli elementi uguali a 1
a <- c(rep(2,3),4,5,rep(1,5),11:15) # 2 2 2 4 5 1 1 1 1 1 11 12 13 14 15
rep(c(1,2), each=3) # 1 1 1 2 2 2
#
a
rep(c("a","b"), 5)
rep(c("a","b"), each = 5)
rep(c(a,"b"), 2)          #il vettore è convertito in character
rep(c(a,"b"), each=2)
#concatenatore circa
paste("file", 1:5, ".txt" , sep="")
paste("file", 1, ".txt" , sep="")
## Selezione di elementi ed operazioni
#selezione di elementi (la prima posizione ha indice 1)
y <- a[6]
y
z <- a[2:4]
z
w <- a[] # estrarre l'elemento 2 e 5
w
z
w <- a[c(2,5)] # estrarre l'elemento 2 e 5
w
x <- c(1, 2, 4, 8, 16, 32)
x
x[-4] #!! non è assegnato ad un oggetto
x
x[-c(4,6)] #tolgo col meno elemento quattro e elemento sei
x
x
x[-c(4,6)] #tolgo col meno elemento quattro e elemento sei
x
# operazioni tra scalare e vettore
x <- 1:10
x*2
x > 5
## operazioni tra 2 vettori di lunghezza diversa
x <- rep(10,8)
y <- c(1,2)
## operazioni tra 2 vettori di lunghezza diversa
x <- rep(10,8)
y <- c(1,2)
x <- x[-1]
y
x*y
y
x*y
x+y
## operazioni tra 2 vettori di lunghezza diversa
x <- rep(10,8)
y <- c(1,2)
x <- x[-1]
y
x*y
x <- x[-1]
y
x*y
x+y
#operatori logici: OR |, AND &
x <- 1:8
y <- c(1,2)
# operazioni tra scalare e vettore
x <- 1:10
x*2
x > 5
## operazioni tra 2 vettori di lunghezza diversa
x <- rep(10,8)
y <- c(1,2)
x <- x[-1]
y
x*y
x+y
#operatori logici: OR |, AND &
x <- 1:8
# selezioniamo gli elementi maggiori o
# uguali a 7 o minori di 5
x
x >= 7
x < 5
x >= 7 | x < 5
x[c(x >= 7 | x < 5)]
x <- 0:7
all(x>0)
any(x<0)
# altre funzioni
x <- c(FALSE, FALSE, TRUE)
sum(x)
mean(x)
length(x)
as.numeric(x)
x <- 3:22
sort(x)
order(x)
max(x)
min(x)
range(x)
sum(x)
prod(x)
mean(x)
# nomi
x <- c(a = 1, b = 2, c = 3)
# nomi
x <- c(a = 1, b = 2, c = 3)
x
x <- 1:3
names(x)
names(x) <- c("a1","b1","c1")
x
y <- c(8,3,5,7,rep(6,2),8,9,2)
rm(ls=list())
rm(ls = list())
rm(list = ls())
y <- c(8,3,5,7,rep(6,2),8,9,2)
y <- c(8,3,5,7,rep(6,2),8,9,2)
all(y < 5)
z <- y[c(y < 5)]
z
t <- c(y < 6)
t
c <- TRUE + FALSE
c
x <- 1:3
x <- 1:3
runif(3)
?rev
#6. Crea un vettore x di lunghezza 4. Cosa restituisce il codice?
x[c(TRUE, TRUE, NA, FALSE)]
x
v <- c(9,2,3,9,4,10,11)
t <- rev(v)
t[1] + t[2] + t[3]
x <- matrix(c(2,3,5,7,11,13), nrow=3)
x
mx <- matrix(x, ncol=3, byrow=TRUE)
mx
mx
nrow(mx)
ncol(mx)
dim(mx)
dim(mx)[1]
rownames(mx) <- c("A", "B")
colnames(mx) <- c("a", "b", "c")
x[1,]
x[,2]
x[,-2]
x[,c(1,3)]
